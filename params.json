{"name":"Prototypo","tagline":"files from the ProToTypo P5 workshop in Rome - March 2015","body":"![cover.png](https://github.com/Co-de-iT/ProToTypo/blob/master/cover.png)\r\n\r\n#PRO-TO-TYPO\r\n\r\n____________________________________________________________________________________________________________________________________\r\n##.:. GENERAL NOTES\r\n\r\nHere's the repository with the definitions made during the Pro-To-Typo Processing workshop held by Alessio Erioli - Co-de-iT at RUFA [http://www.unirufa.it/]. There are also some extra to play with.\r\nThe workshop was focused on generative graphic and typography with Processing\r\n\r\n\r\n\r\n____________________________________________________________________________________________________________________________________\r\n##.:. SKECTH SUMMARY\r\n\r\n\r\n\r\n______________________________\r\n\r\n###. day 01\r\n\r\n\r\n.\r\n\r\n***d01_00_library_test***\r\n\r\npreliminary sketch to test correct installation of all libraries. If a grey window of about 100x100 pixels appear and nothing else happens, everything is ok\r\n\r\n\r\n***d01_01_class_begin***\r\n\r\nfirst sketch - several introductory stuff, the current version draws with mouse\r\n\r\n\r\n***d01_02_class_aclass***\r\n\r\nclasses and objects - let's define a class and a few methods (behaviors)\r\n\r\n\r\n***d01_03_jitterbug***\r\n\r\nJitterbug - simple class example with cascade constructors and save as png with transparent bg\r\n\r\n\r\n***d01_xx_easing***\r\n\r\nmotion easing - mouse wheel controls threshold value\r\n\r\n\r\n***d01_xx_geomerative_basics***\r\n\r\ngeomerative library basics - extract text as shape, extract points from shape\r\n\r\n***d01_xx_inside_outside_text***\r\n\r\n slight modification of the example provided by AmnonP5 - [Generative Typography](http://www.creativeapplications.net/processing/generative-typography-processing-tutorial/)\r\n\r\nuses the text drawn to an offscreen PGraphics to determine what color and shape it will draw to each xy-coordinate on the main screen\r\n\r\n***d01_xx_Object_basics***\r\n\r\nobject and classes basics\r\n\r\n***d01_xx_Object_behaviors***\r\n\r\nobject basics + behaviors\r\n\r\n***d01_xx_particles_advanced***\r\n\r\nparticles with brightness field influence\r\n\r\n***d01_xx_trig_bounce***\r\n\r\nsome trigonometry basics for animation\r\n\r\n***d01_xx_trig_sincurve***\r\n\r\nsome trigonometry basics - sinusoid and Lissajous curve\r\n\r\n***d01_xx_vector_basics***\r\n\r\nbasic vector operations\r\n\r\n***day01_xx_trig_adv***\r\n\r\nplaying with (not so) basic trigonometry\r\n\r\n______________________________\r\n\r\n###. day 02\r\n.\r\n\r\n***d02_01_class_bug***\r\n\r\nthe bug strikes back: class definition: fields, constructor, methods\r\n\r\n***d02_02_class_bug_transp***\r\n\r\ndrawing and saving a png with transparent background\r\n\r\n***d02_03_font_PDF***\r\n\r\nfont to pdf - visualize a random font and saves on request a pdf file\r\n\r\n***d02_04_1_class_bug_pdf_text***\r\n\r\ngenerative text using the bug class previously created - saves pdf when bugs are all 'dead'\r\n\r\n***d02_04_class_bug_transp_text***\r\n\r\ngenerative text using the bug class previously created - saves transparent png\r\n\r\n\r\n______________________________\r\n\r\n###. day 03\r\n.\r\n\r\n***d03_class_pointilisme***\r\n\r\npointilisme effect based on image sampling\r\n\r\n\r\n***d03_class_pshape_img***\r\n\r\nsample an image in grayscale range and draw closest lines network\r\n\r\n\r\n***d03_class_pshape_svg***\r\n\r\nsample svg file for a specific color and draw closest lines network - this sketch creates was used to create the logo above\r\n\r\n***d03_DLA***\r\n\r\n DLA (Diffusion Limited Aggregation) process on logo\r\n\r\n *NOTE: the DLA agorithm is rough, sketchy and for sure can be implemented much better, but for the time being it works the way I want*\r\n\r\n\r\n***d03_pshape_geomerative***\r\n\r\nSVG importer example - uses a custom SVG importer class based on the geomerative library\r\n\r\n***d03_pshape_mesh***\r\n\r\nuse of the mesh library by Lee Byron to generate a Voronoi pattern on a SVG file\r\n\r\n\r\n***d03_pshape_physics***\r\n\r\nSVG importer + Verlet physics 2D example - uses a custom SVG importer class based on the geomerative library\r\n\r\n______________________________\r\n\r\n###. extra\r\n.\r\n\r\n***Prototypo_cover***\r\n\r\n cover design with Geomerative library\r\n\r\n Method\r\n\r\n generates ws cover\r\n . convert text to shapes\r\n . sample shapes for points\r\n . adds random points throughout the page\r\n . creates connections (3 orders of varying thickness according to distance range)\r\n\r\nNotes\r\n\r\n. pdf export in this sketch is done \"old school\" and not through a PGraphics\r\n\r\n\r\n***logo_Fugue***\r\n\r\n logo Fugue style - as in the [Fugue](https://www.behance.net/gallery/24391255/Fugue) project by Stefan Sagmeister\r\n\r\n\r\n______________________________\r\n\r\n\r\n##.:. REQUIREMENTS\r\n\r\nIn order to run these sketches you will need the following libraries:\r\n\r\n. [Toxiclibs](http://toxiclibs.org)\r\n\r\n. [Geomerative](http://www.ricardmarxer.com/geomerative/)\r\n\r\n. [Mesh by Lee Byron](http://leebyron.com/mesh/)\r\n\r\n\r\n______________________________\r\n\r\n##.:. REFERENCES\r\n\r\n.[Generative Typography](http://www.creativeapplications.net/processing/generative-typography-processing-tutorial/)\r\n\r\n.[Caligraft](http://www.caligraft.com)\r\n\r\n______________________________\r\n\r\n##.:. KNOWN BUGS\r\n\r\nnone so far\r\n\r\n\r\n____________________________________________________________________________________________________________________________________\r\n\r\n##.:. FUTURE IMPLEMENTATIONS\r\n\r\n. some comments are in Italian only, English translation will be implemented over time\r\n. make sketches compatible with Processing 3\r\n. some more examples will be added in the \"extra\" section\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}